// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// 2. Users Table
model User {
  id         String         @id @default(uuid())
  name       String         
  email      String         @unique
  password   String
  createdAt  DateTime       @default(now())

  donations  Donation[]
  campaigns  Campaign[]
  
  deletionLogs    DeletionLog[]  // One-to-many relationship with the centralized log table
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?  // Store only the last deletion event for quick checks

}

// 3. Campaign Efforts Table (i.e., a "campaign" or "cause")
model Campaign {
  id            String          @id @default(uuid())
  name          String
  description   String
  mediaUrl      String
  createdAt     DateTime        @default(now())

  // The user who created this campaign
  user          User            @relation(fields: [userId], references: [id])
  userId        String


  isDeleted  Boolean   @default(false)

  // Relation to donations for this specific campaign
  donations     Donation[]

}

// 4. Donations Table
model Donation {
  id         String        @id @default(uuid())
  amount     Decimal?
  message    String?
  createdAt  DateTime      @default(now())

  // The user who donated
  donor      User          @relation(fields: [donorId], references: [id])
  donorId    String

  // The campaign/cause that received this donation
  cause      Campaign  @relation(fields: [effortId], references: [id])
  effortId   String
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime? // Tracks when the campaign was last deleted
}
model DeletionLog {
  id          String    @id @default(uuid())
  userId      String    // Foreign key to User, required
  campaignId  String?   // Nullable: Only set if the event involves a campaign
  event       String    // 'soft_delete_user', 'soft_delete_campaign', 'restore_user', etc.
  timestamp   DateTime  @default(now())
  details     String?   // Optional notes about the event
  
  // Define relationships
  user        User      @relation(fields: [userId], references: [id])
}